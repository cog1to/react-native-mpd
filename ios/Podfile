require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
platform :ios, '11.0'

target 'Yamd' do
  config = use_native_modules!
  # Pods for Yamd
  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :hermes_enabled => false
  )

  pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'
  pod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'

  target 'YamdTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end

#post_install do |installer|
#  ## Fix for XCode 12.5
#  find_and_replace(
#    "../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
#    "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", 
#    "_initializeModules:(NSArray<Class> *)modules"
#  )
#  
#  find_and_replace(
#    "../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
#    "RCTBridgeModuleNameForClass(module))", 
#    "RCTBridgeModuleNameForClass(Class(module)))"
#  )
#end

def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end
